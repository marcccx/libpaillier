#!/usr/bin/python
import pypaillier


 #   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #
 #
 # Copyright 2017, Marc X. Makkes (_@makkes.mx)
 #
 #  Redistribution and use in source and binary forms, with or without
 #  modification, are permitted provided that the following conditions are
 #  met:
 #
 #  1. Redistributions of source code must retain the above copyright
 #  notice, this list of conditions and the following disclaimer.
 #
 #  2. Redistributions in binary form must reproduce the above copyright
 #  notice, this list of conditions and the following disclaimer in the
 #  documentation and/or other materials provided with the distribution.
 #
 #  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 #  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 #  TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 #  PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 #  HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 #  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 #  TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 #  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 #  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 #  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 #  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #
 #   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #


# generate Private and public key pair 
#pub, priv  = pypaillier.generate_keys(1024)
priv = {'p_square': 18113504631527687986885257137433616608560892013480016189695565095191125944774044495652814549613333160630596839394591867773942855975493045565453876282336906774281769475205421506832148166377557731640162031522733203389286195215265202566829050794460030745308333770069559057531022647654074418413500374733780945738195438767534563584314200473780049507794561421686113979016442577576868327782776386896071182166974269452821538866079001131986875917312137104140183544536619021944730311072798441692604481673220718100028782171604083908611922495165017271403303873347090100459119752482887357284105238820190099934170019858582437939809L, 'gl_inv': 26526726368281506996363497613017804155157181050656156171176861015761900839557891885691802273095243554969913150426960656022703024732872049472465807183984410964962258501311704840333963819157526844784266272643028471643485132179243444878633590743358994925782740806797186685036778023382367236253553444163873506945537592887958542482519476283368510920080385787558266953051883284911048559700260203505435113411607527341351211052812844107453512775002076448501234901952740956710308412970494016729469893008157704309136991161458082241246198858195492211346402617579313109852172362966071015765207953154720460241243940850683706296068L, 'pp_invq': 41050304442425121462840863223264728067449198432323572519851006622094987680284563394587092395348968322613554823173244265591310508665026966198470314072984479021171042110358246920936810390381971873716837875019646561593304072007057653336679118766367662853633269158704685728251794066451694373856963903218497509197949642154365879182709754497906180334104155487898256592272467830900878724981848390379306620608681543555378067224202791690282662747239041247583841211238840124053067369145191313520937475265039298155339712814143880127195863430156996070331936460610971472175147773728824136721374269900301904387688696855416363508205L, 'g': 868119750964138570223133267236789880724196486169202809735834353403320990832573441340641010594547618282060684522738901848390525054814505459807209401909106780913370196699126781653602447123615873383901708551456120866880996128025788862931763438765021658681024162425028862186434439255567204821462414990391407699238780185087967096657637972248347003511874072776575895008047606582947351086032876034178095899951059422615923476153966497179250437647494843327815588987662408017387737120162148433367586758121242407509366805636864554834778138907298834975479522042986364108509911188670583741121262378626424316839181479456022225060660499546028249156573335885977455181579095109824287240838356972648648773664363546459771826305466190154183815456326388940323406857403264165074285138828182308848526924527105222346180142227405141541805439663929369973576727642343964418073238231844728496165665295563183674807143808173269014837513541521649714772108999906263881040501441318332038482297338304349579868843619860192796302940148911142464125832960155208811315297155969431674277801477476771826657760565245924847829377056442522638941455812126067410265170673955989243735753012763758188936900839869990776613196656416173402140006541697173696057879886521927618812886644L, 'Hp': 54284288609028764427750080803984973391245691334847619664939088621385273616419749482954118363300716295513454021327034135420612195154139365018646970942857874636266257594989300642998040846285180884467044272174162508179863012936948177787468281682717485935427267090083671002774054067720578221300902271961423202093L, 'Hq': 157496085620815532870538942044357610327864805694931726596393553372964640305390863235661958934357523466776372025591538124085763125264167189950627760489224421053697727071306497186608227570418386921701822330409424254328466502239511482995770340900953451078535068697313572829742636122682038203147123223838536579931L, 'n': 49997622042289861496338457656864858816243036567043701349177102907813362746886518046579219712321700339897718308469673546051094052533201006077394979567821147851247207300409611750170327574789087107921998466962991141565369732874411338369087209267933445855768354055028902676550844260285582649654579520386682235713660971003019936120225481072222944454371538535636727247559010594331511880610930366970835995004122551837726694048052445890149003048786421518790787394838228096120445540768212352135997104443047597763214368027938660331124821982406700596222212419635692845605086561653812775214387200163762146747987259659280241160593L, 'q': 371490836813805582170126016222819217240183955112228961183923305043706202829251670588611832304543404990549152710203016544818363840988518373138501093531607804210178332020064766177086743718938469787180345985184986027174089869135797526940037354440630923461011264553946622900814621930365854752084263410992019705569L, 'p': 134586420680274011018765961193831830228532995735681351465305885083582874332379368296778030560392464908145725604497035635886743960890790900279394295823400107256734808034090613468981703219983055571317748318706679998571829694956862534040324879121523642168814447828115958249687641634951131868143372800733088491697L, 'q_min_1': 371490836813805582170126016222819217240183955112228961183923305043706202829251670588611832304543404990549152710203016544818363840988518373138501093531607804210178332020064766177086743718938469787180345985184986027174089869135797526940037354440630923461011264553946622900814621930365854752084263410992019705568L, 'n_squre': 2499762209883669020841001565361359845234039304264972788575757587489323847935067892614999148114955149474587241040666477825828205524124755713595676899005202255368952863652880440754994246994740259227825452054233858421547448266385929545887769377109559475262476154351905849488284846474513011098055854288617902162351430742953641473590728300865369451150866607599788388782557313707148190885088505035286113416121404741589926474191465997554796453582068386611198460847205507638442988479784422001100545023974060574852946921021680042048647711390361228820007461719480951646072755935297444839901651382740729484198233997403159334467761767012230495607798695854967112242032560857058425020994006701073751937948993934973531032955903053502176670090377361961147620836145900971151377809871822526711841380297142773340110578420359331075146590512981609994123448253279773173175543855757385665413053248483495987719813783195051500709710588414511952688932794351358435620536277023664057921009087146865857849152384163483315352643781374526967573129712038995915949960692549161012653952940992129244965481095083836664569416015908374631071103136572097054543363934123371228974096144494158202871978362931325878755101308660463991049430047512003056948310153943664511616111649L, 'p_min_1': 134586420680274011018765961193831830228532995735681351465305885083582874332379368296778030560392464908145725604497035635886743960890790900279394295823400107256734808034090613468981703219983055571317748318706679998571829694956862534040324879121523642168814447828115958249687641634951131868143372800733088491696L, 'alpha': 3720497310465126891995557481108661506943971613074569731574197254514351153549573400989430563739965573721L, 'q_square': 138005441836621528785973141555187073898891631486568443465863593200476079041669631461738916637714608872466114636291963164505211457621255311082996149499817962690470801994263184334619352705942026787501951819641584384911640525494987273692728255116760714651765253685750546240569560110730018025738451464114612535217072408112159816175599181156460239901623720367430805247125262725161523545548892429100223658443048390886295249007920394084789951244031272870981822502547423598120911515311526446003862147788681419964991594316509802662109057264076911918065456738300314143292125997003788317166720265492129055116982956817205449613761L, 'qq_invp': 8947317599864740033497594433600130748793838134720128829326096285718375066601954651992127316972732017284163485296429280459783543868174039878924665494836668830076165190051364829233517184407115234205160591943344579972065660867353685032408090501565783002135084896324216948299050193833888275797615617168184726515711328848654056937515726574316764120267383047738470655286542763430633155629081976591529374395441008282348626823849654199866340301547380271206946183599387972067378171623021038615059629178008299607874655213794780203928958552249704525890275959024721373429938787924988638493012930263460242360298562803863877652389L, 'lambda': 3124851377643116343521153603554053676015189785440231334323568931738335171680407377911201232020106271243607394279354596628193378283325062879837186222988821740702950456275600734385645473424317944245124904185186946347835608304650708648067950579245840365985522128439306417284427766267848915603411220024167639732072180859095366032939786818425393337931426349049301058431861337762763925215581208005340383258699167621189488483334524606840243452931694515335805750342701261540845775044628560780620541094007879525294767107752937144086181401144627533452615636629596142498453803079484387128992808537402822507984976465472195810208L}
#print priv

pub, priv = pypaillier.set_secret(priv["p"], priv["q"], priv["g"], priv["alpha"])


msg = 1
k = 3;

print "Plain Text : ", msg 
#c = pypaillier.encrypt(msg,  pub)
c = pypaillier.encrypt_r(1,1,  pub)
c = pypaillier.encrypt_mul(c, 3, pub)

#c2 = c * c
##c = pypaillier.encrypt_add(msg, c, pub)
print "Cipher Text: ", c
#
##print "g: " + str(g)
##print "msg: " + str(msg)
#
##print "cipher Text: " + str((g**msg ) % n**2)
##print "cipher Text: " + str(MonExp(exp)
d = pypaillier.decrypt(c, priv)
#d2 = pypaillier.decrypt(c2, priv)
print "Plain Text : ", d
#print "Plain Text : ", d2
#
## store key
#
#
## generate keys from stored parameters
#pub2, priv2 = pypaillier.set_secret(p,q,g)
#print pub2["n"]
#d = pypaillier.decrypt(c, priv2)
#print "Plain Text: " + str(d)
#
#print pub2
#


